---
- name: Ensure docker compose requirements are provided
  ansible.builtin.assert:
    that:
      - xray_domain | length > 0
    fail_msg: "xray_domain must be provided before rendering docker-compose.yml."

- name: Ensure compose directory exists
  ansible.builtin.file:
    path: "{{ compose_project_directory }}"
    state: directory
    mode: "0750"

- name: Check for existing docker compose project file
  ansible.builtin.stat:
    path: "{{ compose_project_directory }}/docker-compose.yml"
  register: docker_compose_file

- name: Stop existing docker compose project
  ansible.builtin.command: >-
    docker compose down{{ ' --remove-orphans' if docker_compose_remove_orphans | bool else '' }}
  args:
    chdir: "{{ compose_project_directory }}"
  when:
    - docker_compose_up | bool
    - docker_compose_down_before_up | bool
    - not ansible_check_mode
    - docker_compose_file.stat.exists
  environment:
    COMPOSE_FILE: "{{ compose_project_directory }}/docker-compose.yml"
  register: compose_down
  changed_when: >-
    compose_down.rc == 0 and (
      (compose_down.stdout | default('') | trim | length) > 0 or
      (compose_down.stderr | default('') | trim | length) > 0
    )
  failed_when: >-
    compose_down.rc != 0 and
    ('yaml: line' not in (compose_down.stderr | default('')))

- name: Remove invalid docker compose definition when parsing fails
  ansible.builtin.file:
    path: "{{ compose_project_directory }}/docker-compose.yml"
    state: absent
  when:
    - compose_down is defined
    - compose_down.rc != 0
    - compose_down.stderr is defined
    - "'yaml: line' in compose_down.stderr"

- name: Warn about docker compose project stop failure caused by invalid definition
  ansible.builtin.debug:
    msg: >-
      Skipping docker compose down because the existing docker-compose.yml file could not be parsed.
      It will be replaced by the freshly rendered template.
  when:
    - compose_down is defined
    - compose_down.rc != 0
    - compose_down.stderr is defined
    - "'yaml: line' in compose_down.stderr"

- name: Render Docker Compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ compose_project_directory }}/docker-compose.yml"
    mode: "0640"
  notify: Restart xray container

- name: Discover conflicting Xray containers
  ansible.builtin.shell: |
    set -o pipefail
    docker ps --format '{{ "{{" }}.ID{{ "}}" }} {{ "{{" }}.Image{{ "}}" }} {{ "{{" }}.Ports{{ "}}" }}' \
    | while read -r id image ports; do
        if [ -z "${id}" ]; then
          continue
        fi
        if echo "${ports}" | grep -q '443'; then
          echo "${id}"
          continue
        fi
        if echo "${image}" | grep -iq 'xray'; then
          echo "${id}"
        fi
      done \
    | sort -u
  args:
    executable: /bin/bash
  register: xray_conflicting_containers
  changed_when: false
  when:
    - docker_compose_up | bool
    - not ansible_check_mode

- name: Collect conflicting Xray container ids
  ansible.builtin.set_fact:
    xray_conflicting_container_ids: "{{ xray_conflicting_containers.stdout_lines | map('trim') | reject('equalto', '') | list }}"
  when:
    - docker_compose_up | bool
    - not ansible_check_mode
    - xray_conflicting_containers is defined

- name: Stop conflicting Xray containers
  ansible.builtin.command: docker stop {{ item }}
  loop: "{{ xray_conflicting_container_ids | default([]) }}"
  when:
    - docker_compose_up | bool
    - not ansible_check_mode
    - xray_conflicting_container_ids | length > 0

- name: Remove conflicting Xray containers
  ansible.builtin.command: docker rm {{ item }}
  loop: "{{ xray_conflicting_container_ids | default([]) }}"
  when:
    - docker_compose_up | bool
    - not ansible_check_mode
    - xray_conflicting_container_ids | length > 0

- name: Run docker compose up
  ansible.builtin.command: docker compose up -d
  args:
    chdir: "{{ compose_project_directory }}"
  when:
    - docker_compose_up | bool
    - not ansible_check_mode
  environment:
    COMPOSE_FILE: "{{ compose_project_directory }}/docker-compose.yml"
  register: compose_up
  changed_when: compose_up.rc == 0

- name: Wait for Xray container to initialize
  ansible.builtin.pause:
    seconds: 30
  when:
    - docker_compose_up | bool
    - not ansible_check_mode

- name: Check Xray container status
  ansible.builtin.command: docker inspect -f '{{ '{{' }} .State.Status {{ '}}' }}' {{ xray_container_name }}
  register: xray_status
  changed_when: false
  failed_when: false
  when:
    - docker_compose_up | bool
    - not ansible_check_mode

- name: Capture Xray container logs when not running
  ansible.builtin.command: docker logs --tail {{ xray_failure_log_lines }} {{ xray_container_name }}
  register: xray_start_logs
  failed_when: false
  changed_when: false
  when:
    - docker_compose_up | bool
    - not ansible_check_mode
    - xray_status is defined
    - xray_status.stdout is not defined or (xray_status.stdout | trim | lower) != 'running'

- name: Display Xray container logs on failure
  ansible.builtin.debug:
    msg: |-
      Recent Xray container logs (last {{ xray_failure_log_lines }} lines):
      {{ (xray_start_logs.stdout_lines | default([xray_start_logs.stdout | default('No logs available', true)])) | join('\n') }}
  when:
    - docker_compose_up | bool
    - not ansible_check_mode
    - xray_start_logs is defined
    - xray_status is defined
    - xray_status.stdout is not defined or (xray_status.stdout | trim | lower) != 'running'

- name: Fail because the Xray container is not running
  ansible.builtin.fail:
    msg: Xray container failed to reach the running state after deployment. Review the logs above for details.
  when:
    - docker_compose_up | bool
    - not ansible_check_mode
    - xray_status is defined
    - xray_status.stdout is not defined or (xray_status.stdout | trim | lower) != 'running'
